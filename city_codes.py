#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
城市编码映射文件

包含各招聘平台的城市名称到城市编码的映射
"""

# BOSS直聘城市编码
# 格式: 城市名称: 城市代码
BOSS_CITY_CODES = {
    '北京': '101010100',
    '上海': '101020100',
    '广州': '101280100',
    '深圳': '101280600',
    '杭州': '101210100',
    '成都': '101270100',
    '南京': '101190100',
    '武汉': '101200100',
    '西安': '101110100',
    '厦门': '101230200',
    '长沙': '101250100',
    '苏州': '101190400',
    '天津': '101030100',
    '重庆': '101040100',
    '郑州': '101180100',
    '青岛': '101120100',
    '合肥': '101220100',
    '佛山': '101280800',
    '济南': '101120100',
    '大连': '101070100',
    '福州': '101230100',
    '珠海': '101280700',
    '宁波': '101210400',
    '东莞': '101281600',
    '沈阳': '101070100',
    '太原': '101100100',
    '南昌': '101240100',
    '贵阳': '101260100',
    '昆明': '101290100',
    '南宁': '101300100',
    '石家庄': '101090100',
    '哈尔滨': '101050100',
    '长春': '101060100',
    '兰州': '101160100',
    '乌鲁木齐': '101130100',
    '呼和浩特': '101080100',
    '香港': '101320100',
    '澳门': '101330100',
    '台北': '101340100',
}

# 智联招聘城市编码
# 格式: 城市名称: 城市代码
ZHILIAN_CITY_CODES = {
    '北京': '530',
    '上海': '538',
    '广州': '763',
    '深圳': '765',
    '杭州': '653',
    '成都': '801',
    '南京': '635',
    '武汉': '736',
    '西安': '854',
    '厦门': '682',
    '长沙': '749',
    '苏州': '639',
    '天津': '531',
    '重庆': '551',
    # 可以根据需要添加更多城市...
}

# 前程无忧城市编码
# 格式: 城市名称: 城市代码
QIANCHENG_CITY_CODES = {
    '北京': '010000',
    '上海': '020000',
    '广州': '030200',
    '深圳': '040000',
    '杭州': '080200',
    '成都': '090200',
    '南京': '070200',
    '武汉': '180200',
    '西安': '200200',
    '厦门': '110300',
    '长沙': '190200',
    '苏州': '070300',
    '天津': '050000',
    '重庆': '060000',
    # 可以根据需要添加更多城市...
}

# 拉勾网不需要特殊城市编码，直接使用城市名称

# 所有平台城市编码集合
CITY_CODES = {
    'boss': BOSS_CITY_CODES,
    'zhilian': ZHILIAN_CITY_CODES,
    'qiancheng': QIANCHENG_CITY_CODES,
    'lagou': {}  # 拉勾网不需要特殊编码
}

def get_city_code(platform, city_name, default=None):
    """
    获取指定平台下城市的编码
    
    Args:
        platform: 平台标识，如'boss', 'zhilian', 'qiancheng', 'lagou'
        city_name: 城市名称
        default: 找不到时的默认返回值
    
    Returns:
        str: 城市编码，如果找不到则返回默认值
    """
    if platform not in CITY_CODES:
        return default
    
    # 拉勾网直接使用城市名称
    if platform == 'lagou':
        return city_name
    
    # 其他平台查找对应编码
    return CITY_CODES[platform].get(city_name, default)

def list_supported_cities(platform):
    """
    列出指定平台支持的所有城市
    
    Args:
        platform: 平台标识
    
    Returns:
        list: 城市名称列表
    """
    if platform not in CITY_CODES:
        return []
    
    return sorted(list(CITY_CODES[platform].keys())) 